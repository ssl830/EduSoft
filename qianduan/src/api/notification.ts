import axios from './axios';

// 通知类型定义
export interface Notification {
  id: number;
  type: 'task' | 'deadline' | 'system' | 'course' | 'assignment';
  title: string;
  content: string;
  courseName?: string;
  courseId?: string;
  createdAt: string;
  dueDate?: string;
  link?: string;
  priority: 'low' | 'medium' | 'high' | 'urgent';
  read: boolean;
  senderRole?: 'teacher' | 'assistant' | 'system';
  senderId?: string;
  targetType?: 'individual' | 'class' | 'all';
  autoGenerated?: boolean;
  taskId?: string;
  tags?: string[];
}

// 个人任务类型定义
export interface PersonalTask {
  id: number;
  title: string;
  description?: string;
  completed: boolean;
  createdAt: string;
  dueDate?: string;
  priority: 'low' | 'medium' | 'high';
  tags?: string[];
  linkedNotificationId?: number;
}

// 任务分配信息
export interface TaskAssignment {
  id: string;
  title: string;
  description: string;
  courseId: string;
  courseName: string;
  dueDate: string;
  assignedBy: string;
  assignedTo: string[];
  link?: string;
  createdAt: string;
}

export const notificationApi = {
  // 获取通知列表
  getNotifications: async (params?: {
    type?: string;
    read?: boolean;
    courseId?: string;
    limit?: number;
    offset?: number;
  }) => {
    const response = await axios.get('/notifications', { params });
    return response.data;
  },

  // 获取未读通知数量
  getUnreadCount: async () => {
    const response = await axios.get('/notifications/unread-count');
    return response.data.count;
  },

  // 标记通知为已读
  markAsRead: async (id: number) => {
    const response = await axios.patch(`/notifications/${id}/read`);
    return response.data;
  },

  // 批量标记为已读
  markMultipleAsRead: async (ids: number[]) => {
    const response = await axios.patch('/notifications/batch-read', { ids });
    return response.data;
  },

  // 删除通知
  deleteNotification: async (id: number) => {
    const response = await axios.delete(`/notifications/${id}`);
    return response.data;
  },

  // 创建通知（用于教师/助教）
  createNotification: async (notification: Omit<Notification, 'id' | 'createdAt'>) => {
    const response = await axios.post('/notifications', notification);
    return response.data;
  },

  // 自动生成任务分配通知
  generateTaskAssignmentNotification: async (taskAssignment: TaskAssignment) => {
    const response = await axios.post('/notifications/auto-generate/task-assignment', taskAssignment);
    return response.data;
  },

  // 自动生成DDL提醒
  generateDeadlineReminder: async (taskId: string, reminderDays: number[]) => {
    const response = await axios.post('/notifications/auto-generate/deadline-reminder', {
      taskId,
      reminderDays
    });
    return response.data;
  },

  // 任务完成时自动删除相关通知
  autoDeleteOnTaskCompletion: async (taskId: string) => {
    const response = await axios.delete(`/notifications/auto-delete/task/${taskId}`);
    return response.data;
  },

  // 获取个人任务清单
  getPersonalTasks: async (params?: {
    completed?: boolean;
    limit?: number;
    offset?: number;
  }) => {
    const response = await axios.get('/personal-tasks', { params });
    return response.data;
  },

  // 创建个人任务
  createPersonalTask: async (task: Omit<PersonalTask, 'id' | 'createdAt'>) => {
    const response = await axios.post('/personal-tasks', task);
    return response.data;
  },

  // 更新个人任务
  updatePersonalTask: async (id: number, updates: Partial<PersonalTask>) => {
    const response = await axios.patch(`/personal-tasks/${id}`, updates);
    return response.data;
  },

  // 删除个人任务
  deletePersonalTask: async (id: number) => {
    const response = await axios.delete(`/personal-tasks/${id}`);
    return response.data;
  },

  // 检查DDL并生成提醒（系统调用）
  checkDeadlinesAndGenerateReminders: async () => {
    const response = await axios.post('/notifications/check-deadlines');
    return response.data;
  },

  // 获取通知设置
  getNotificationSettings: async () => {
    const response = await axios.get('/notifications/settings');
    return response.data;
  },

  // 更新通知设置
  updateNotificationSettings: async (settings: any) => {
    const response = await axios.patch('/notifications/settings', settings);
    return response.data;
  }
};

export default notificationApi;
