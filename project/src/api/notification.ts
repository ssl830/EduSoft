import axios from './axios';

// 通知类型枚举（严格按照后端规范）
export type NotificationType = 
  | 'COURSE_NOTICE'    // 课程通知
  | 'PRACTICE_NOTICE'  // 练习通知
  | 'DDL_REMINDER'     // DDL提醒
  | 'TASK_REMINDER'    // 任务提醒
  | 'HOMEWORK'         // 作业
  | 'TASK'             // 任务
  | 'PRACTICE';        // 在线练习

// 通知实体类型定义（严格按照后端规范）
export interface Notification {
  id: number;
  userId?: number;
  title: string;
  message: string; // 后端使用message字段
  type: NotificationType; // 使用后端枚举类型
  readFlag: boolean; // 后端使用readFlag字段
  createdAt: string;
  relatedId?: number;
  relatedType?: string;
}

// 前端显示用的通知类型（添加额外字段用于前端展示）
export interface FrontendNotification extends Notification {
  content?: string; // 前端兼容字段，从message映射
  read?: boolean; // 前端兼容字段，从readFlag映射
  priority?: 'high' | 'medium' | 'low';
  dueDate?: string;
  link?: string;
  tags?: string[];
  courseName?: string;
  autoGenerated?: boolean; // 是否自动生成
  senderRole?: string; // 发送者角色
}

// API响应类型
export interface ApiResponse<T = any> {
  code: number;
  message: string;
  data?: T;
}

// 未读数量响应类型
export interface UnreadCountResponse {
  count: number;
}

// 数据转换函数：后端通知转前端通知
const convertToFrontendNotification = (notification: Notification): FrontendNotification => {
  return {
    ...notification,
    content: notification.message, // message -> content
    read: notification.readFlag, // readFlag -> read
    priority: 'medium', // 默认优先级
  };
};

// 数据转换函数：前端通知列表转换
const convertNotificationList = (notifications: Notification[]): FrontendNotification[] => {
  return notifications.map(convertToFrontendNotification);
};

// ========== 任务提醒相关类型（个人任务功能） ==========

// 后端任务提醒类型（严格按照后端规范）
export interface TaskReminder {
  id: number;
  userId?: number;
  title: string;
  content?: string;
  createTime: string;
  deadline?: string;
  priority: 'HIGH' | 'MEDIUM' | 'LOW';
  completed: boolean;
  completedTime?: string;
}

// 前端个人任务类型（用于前端展示）
export interface PersonalTask {
  id: number;
  title: string;
  description?: string;
  createdAt: string;
  dueDate?: string;
  priority: 'high' | 'medium' | 'low';
  completed: boolean;
  linkedNotificationId?: number;
}

// 创建任务提醒请求类型
export interface CreateTaskReminderRequest {
  title: string;
  content?: string;
  deadline?: string;
  priority: 'HIGH' | 'MEDIUM' | 'LOW';
}

// 更新任务提醒请求类型
export interface UpdateTaskReminderRequest {
  title?: string;
  content?: string;
  deadline?: string;
  priority?: 'HIGH' | 'MEDIUM' | 'LOW';
  completed?: boolean;
}

// 数据转换函数：后端任务提醒转前端个人任务
const convertToPersonalTask = (taskReminder: TaskReminder): PersonalTask => {
  return {
    id: taskReminder.id,
    title: taskReminder.title,
    description: taskReminder.content,
    createdAt: taskReminder.createTime,
    dueDate: taskReminder.deadline,
    priority: taskReminder.priority.toLowerCase() as 'high' | 'medium' | 'low',
    completed: taskReminder.completed,
  };
};

// 数据转换函数：前端个人任务转后端请求格式
const convertPersonalTaskToRequest = (task: Omit<PersonalTask, 'id' | 'createdAt'>): CreateTaskReminderRequest => {
  return {
    title: task.title,
    content: task.description,
    deadline: task.dueDate,
    priority: task.priority.toUpperCase() as 'HIGH' | 'MEDIUM' | 'LOW',
  };
};

// 数据转换函数：任务提醒列表转换
const convertTaskReminderList = (taskReminders: TaskReminder[]): PersonalTask[] => {
  return taskReminders.map(convertToPersonalTask);
};

export const notificationApi = {
  // ========== 通知相关接口（严格按照后端规范） ==========
  
  // 获取用户的所有通知
  getNotifications: async (): Promise<FrontendNotification[]> => {
    try {
      const response = await axios.get<ApiResponse<Notification[]>>('/api/notifications');
      
      if (response.data.code === 200 && response.data.data) {
        return convertNotificationList(response.data.data);
      } else {
        console.error('获取通知失败:', response.data.message);
        return [];
      }
    } catch (error) {
      console.error('获取通知API调用失败:', error);
      throw error;
    }
  },

  // 获取未读通知数量
  getUnreadCount: async (): Promise<number> => {
    try {
      const response = await axios.get<ApiResponse<UnreadCountResponse>>('/api/notifications/unread');
      
      if (response.data.code === 200 && response.data.data) {
        return response.data.data.count;
      } else {
        console.error('获取未读数量失败:', response.data.message);
        return 0;
      }
    } catch (error) {
      console.error('获取未读数量API调用失败:', error);
      return 0;
    }
  },

  // 标记通知为已读
  markAsRead: async (id: number): Promise<boolean> => {
    try {
      const response = await axios.put<ApiResponse>(`/api/notifications/${id}/read`);
      
      if (response.data.code === 200) {
        return true;
      } else {
        console.error('标记已读失败:', response.data.message);
        return false;
      }
    } catch (error) {
      console.error('标记已读API调用失败:', error);
      throw error;
    }
  },

  // 标记所有通知为已读
  markAllAsRead: async (): Promise<boolean> => {
    try {
      const response = await axios.put<ApiResponse>('/api/notifications/read-all');
      
      if (response.data.code === 200) {
        return true;
      } else {
        console.error('标记所有已读失败:', response.data.message);
        return false;
      }
    } catch (error) {
      console.error('标记所有已读API调用失败:', error);
      throw error;
    }
  },

  // 删除通知
  deleteNotification: async (id: number): Promise<boolean> => {
    try {
      const response = await axios.delete<ApiResponse>(`/api/notifications/${id}`);
      
      if (response.data.code === 200) {
        return true;
      } else {
        console.error('删除通知失败:', response.data.message);
        return false;
      }
    } catch (error) {
      console.error('删除通知API调用失败:', error);
      throw error;
    }
  },

  // ========== 批量操作接口（前端辅助功能） ==========
  
  // 批量标记通知为已读
  markMultipleAsRead: async (ids: number[]): Promise<boolean> => {
    try {
      // 由于后端没有批量接口，使用循环调用单个接口
      const promises = ids.map(id => notificationApi.markAsRead(id));
      const results = await Promise.all(promises);
      
      // 如果所有操作都成功，返回true
      return results.every(result => result === true);
    } catch (error) {
      console.error('批量标记已读失败:', error);
      throw error;
    }
  },

  // 批量删除通知
  deleteMultipleNotifications: async (ids: number[]): Promise<boolean> => {
    try {
      // 由于后端没有批量接口，使用循环调用单个接口
      const promises = ids.map(id => notificationApi.deleteNotification(id));
      const results = await Promise.all(promises);
      
      // 如果所有操作都成功，返回true
      return results.every(result => result === true);
    } catch (error) {
      console.error('批量删除通知失败:', error);
      throw error;
    }
  },
  // ========== 前端辅助功能 ==========
  
  // 获取通知类型的中文显示
  getNotificationTypeLabel: (type: string): string => {
    const typeMap: Record<string, string> = {
      'COURSE_NOTICE': '课程通知',
      'PRACTICE_NOTICE': '练习通知', 
      'DDL_REMINDER': 'DDL提醒',
      'TASK_REMINDER': '任务提醒',
      'HOMEWORK': '作业通知',
      'TASK': '任务通知',
      'PRACTICE': '在线练习'
    };
    return typeMap[type] || '未知类型';
  },

  // 获取通知类型的图标
  getNotificationTypeIcon: (type: string): string => {
    const iconMap: Record<string, string> = {
      'COURSE_NOTICE': 'fa-graduation-cap',
      'PRACTICE_NOTICE': 'fa-pencil',
      'DDL_REMINDER': 'fa-clock-o',
      'TASK_REMINDER': 'fa-bell',
      'HOMEWORK': 'fa-file-text',
      'TASK': 'fa-tasks',
      'PRACTICE': 'fa-code'
    };
    return iconMap[type] || 'fa-bell';
  },

  // 获取通知类型的颜色
  getNotificationTypeColor: (type: string): string => {
    const colorMap: Record<string, string> = {
      'COURSE_NOTICE': 'blue',
      'PRACTICE_NOTICE': 'green',
      'DDL_REMINDER': 'red',
      'TASK_REMINDER': 'orange', 
      'HOMEWORK': 'purple',
      'TASK': 'teal',
      'PRACTICE': 'cyan'
    };
    return colorMap[type] || 'gray';
  },

  // ========== 个人任务相关接口（任务提醒功能） ==========
  
  // 创建个人任务（兼容前端PersonalTask）
  createPersonalTask: async (data: Omit<PersonalTask, 'id' | 'createdAt'>): Promise<PersonalTask> => {
    try {
      const taskData = convertPersonalTaskToRequest(data);
      const response = await axios.post<ApiResponse<TaskReminder>>('/api/task-reminders', taskData);
      
      if (response.data.code === 200 && response.data.data) {
        return convertToPersonalTask(response.data.data);
      } else {
        console.error('创建个人任务失败:', response.data.message);
        throw new Error(response.data.message || '创建个人任务失败');
      }
    } catch (error) {
      console.error('创建个人任务API调用失败:', error);
      throw error;
    }
  },

  // 更新个人任务
  updatePersonalTask: async (id: number, data: Partial<PersonalTask>): Promise<PersonalTask> => {
    try {
      const taskData: UpdateTaskReminderRequest = {};
      if (data.title) taskData.title = data.title;
      if (data.description) taskData.content = data.description;
      if (data.dueDate) taskData.deadline = data.dueDate;
      if (data.priority) taskData.priority = data.priority.toUpperCase() as 'HIGH' | 'MEDIUM' | 'LOW';
      if (typeof data.completed === 'boolean') taskData.completed = data.completed;
      
      const response = await axios.put<ApiResponse<TaskReminder>>(`/api/task-reminders/${id}`, taskData);
      
      if (response.data.code === 200 && response.data.data) {
        return convertToPersonalTask(response.data.data);
      } else {
        console.error('更新个人任务失败:', response.data.message);
        throw new Error(response.data.message || '更新个人任务失败');
      }
    } catch (error) {
      console.error('更新个人任务API调用失败:', error);
      throw error;
    }
  },

  // 删除个人任务
  deletePersonalTask: async (id: number): Promise<boolean> => {
    try {
      const response = await axios.delete<ApiResponse>(`/api/task-reminders/${id}`);
      
      if (response.data.code === 200) {
        return true;
      } else {
        console.error('删除个人任务失败:', response.data.message);
        return false;
      }
    } catch (error) {
      console.error('删除个人任务API调用失败:', error);
      throw error;
    }
  },

  // 获取用户的所有个人任务
  getPersonalTasks: async (userId: number): Promise<PersonalTask[]> => {
    try {
      const response = await axios.get<ApiResponse<TaskReminder[]>>(`/api/task-reminders/user/${userId}`);
      
      if (response.data.code === 200 && response.data.data) {
        return convertTaskReminderList(response.data.data);
      } else {
        console.error('获取个人任务失败:', response.data.message);
        return [];
      }
    } catch (error) {
      console.error('获取个人任务API调用失败:', error);
      return [];
    }
  },

  // 获取用户未完成的个人任务
  getUncompletedPersonalTasks: async (userId: number): Promise<PersonalTask[]> => {
    try {
      const response = await axios.get<ApiResponse<TaskReminder[]>>(`/api/task-reminders/user/${userId}/uncompleted`);
      
      if (response.data.code === 200 && response.data.data) {
        return convertTaskReminderList(response.data.data);
      } else {
        console.error('获取未完成个人任务失败:', response.data.message);
        return [];
      }
    } catch (error) {
      console.error('获取未完成个人任务API调用失败:', error);
      return [];
    }
  },

  // 获取用户已完成的个人任务
  getCompletedPersonalTasks: async (userId: number): Promise<PersonalTask[]> => {
    try {
      const response = await axios.get<ApiResponse<TaskReminder[]>>(`/api/task-reminders/user/${userId}/completed`);
      
      if (response.data.code === 200 && response.data.data) {
        return convertTaskReminderList(response.data.data);
      } else {
        console.error('获取已完成个人任务失败:', response.data.message);
        return [];
      }
    } catch (error) {
      console.error('获取已完成个人任务API调用失败:', error);
      return [];
    }
  },

  // 标记任务为已完成
  markTaskAsCompleted: async (id: number): Promise<boolean> => {
    try {
      const response = await axios.put<ApiResponse>(`/api/task-reminders/${id}/complete`);
      
      if (response.data.code === 200) {
        return true;
      } else {
        console.error('标记任务完成失败:', response.data.message);
        return false;
      }
    } catch (error) {
      console.error('标记任务完成API调用失败:', error);
      throw error;
    }
  },

  // 标记任务为未完成
  markTaskAsUncompleted: async (id: number): Promise<boolean> => {
    try {
      const response = await axios.put<ApiResponse>(`/api/task-reminders/${id}/uncomplete`);
      
      if (response.data.code === 200) {
        return true;
      } else {
        console.error('标记任务未完成失败:', response.data.message);
        return false;
      }
    } catch (error) {
      console.error('标记任务未完成API调用失败:', error);
      throw error;
    }
  },

  // ========== 任务提醒原始接口（向后兼容） ==========
  
  // 创建任务提醒（原始后端接口）
  createTaskReminder: async (data: CreateTaskReminderRequest): Promise<TaskReminder> => {
    try {
      const response = await axios.post<ApiResponse<TaskReminder>>('/api/task-reminders', data);
      
      if (response.data.code === 200 && response.data.data) {
        return response.data.data;
      } else {
        console.error('创建任务提醒失败:', response.data.message);
        throw new Error(response.data.message || '创建任务提醒失败');
      }
    } catch (error) {
      console.error('创建任务提醒API调用失败:', error);
      throw error;
    }
  },

  // 更新任务提醒（原始后端接口）
  updateTaskReminder: async (id: number, data: UpdateTaskReminderRequest): Promise<TaskReminder> => {
    try {
      const response = await axios.put<ApiResponse<TaskReminder>>(`/api/task-reminders/${id}`, data);
      
      if (response.data.code === 200 && response.data.data) {
        return response.data.data;
      } else {
        console.error('更新任务提醒失败:', response.data.message);
        throw new Error(response.data.message || '更新任务提醒失败');
      }
    } catch (error) {
      console.error('更新任务提醒API调用失败:', error);
      throw error;
    }
  },

  // 获取任务提醒列表（原始后端接口）
  getTaskReminders: async (userId: number): Promise<TaskReminder[]> => {
    try {
      const response = await axios.get<ApiResponse<TaskReminder[]>>(`/api/task-reminders/user/${userId}`);
      
      if (response.data.code === 200 && response.data.data) {
        return response.data.data;
      } else {
        console.error('获取任务提醒失败:', response.data.message);
        return [];
      }
    } catch (error) {
      console.error('获取任务提醒API调用失败:', error);
      return [];
    }
  },

  // 删除任务提醒（原始后端接口）
  deleteTaskReminder: async (id: number): Promise<boolean> => {
    try {
      const response = await axios.delete<ApiResponse>(`/api/task-reminders/${id}`);
      
      if (response.data.code === 200) {
        return true;
      } else {
        console.error('删除任务提醒失败:', response.data.message);
        return false;
      }
    } catch (error) {
      console.error('删除任务提醒API调用失败:', error);
      throw error;
    }
  },

  // 获取任务提醒详情（原始后端接口）
  getTaskReminderById: async (id: number): Promise<TaskReminder | null> => {
    try {
      const response = await axios.get<ApiResponse<TaskReminder>>(`/api/task-reminders/${id}`);
      
      if (response.data.code === 200 && response.data.data) {
        return response.data.data;
      } else {
        console.error('获取任务提醒详情失败:', response.data.message);
        return null;
      }
    } catch (error) {
      console.error('获取任务提醒详情API调用失败:', error);
      return null;
    }
  },

  // ========== DDL和提醒相关辅助功能 ==========
  
  // 检查DDL并生成提醒（系统调用）
  checkDeadlinesAndGenerateReminders: async (): Promise<boolean> => {
    try {
      const response = await axios.post<ApiResponse>('/api/notifications/check-deadlines');
      
      if (response.data.code === 200) {
        return true;
      } else {
        console.error('检查DDL失败:', response.data.message);
        return false;
      }
    } catch (error) {
      console.error('检查DDL API调用失败:', error);
      return false;
    }  },
  // 任务完成时自动删除相关通知
  autoDeleteOnTaskCompletion: async (notificationId: string): Promise<boolean> => {
    try {
      const response = await axios.delete<ApiResponse>(`/api/notifications/${notificationId}/auto-delete`);
      
      if (response.data.code === 200) {
        return true;
      } else {
        console.error('自动删除通知失败:', response.data.message);
        return false;
      }    } catch (error) {
      console.error('自动删除通知API调用失败:', error);
      return false;
    }
  }
};
