<!-- 实现具体的sql语句 -->

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.example.edusoft.file.mapper.FileMapper">

     <!-- 结果映射 -->
    <resultMap id="FileNodeResultMap" type="org.example.edusoft.entity.file.FileInfo">
        <id property="id" column="id"/>
        <result property="name" column="file_name"/>
        <result property="isDir" column="is_dir"/>
        <result property="parentId" column="parent_id"/>
        <result property="courseId" column="course_id"/>
        <result property="classId" column="class_id"/>
        <result property="uploaderId" column="uploader_id"/>
        <result property="visibility" column="visibility"/>
        <result property="path" column="file_path"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>
    <!-- 查询所有节点 -->
    <select id="selectAll" resultMap="FileNodeResultMap">
        SELECT * FROM file_node
    </select>

    <!-- 插入一个新节点 -->
    <insert id="insertNode">
        INSERT INTO file_node (
            name, is_dir, parent_id, course_id, class_id,
            uploader_id, visibility, path
        ) VALUES (
            #{name}, #{isDir}, #{parentId}, #{courseId}, #{classId},
            #{uploaderId}, #{visibility}, #{path}
        )
    </insert>

    <!-- 更新节点信息 -->
    <update id="updateNode">
        UPDATE file_node SET
            name = #{name},
            is_dir = #{isDir},
            parent_id = #{parentId},
            course_id = #{courseId},
            class_id = #{classId},
            uploader_id = #{uploaderId},
            visibility = #{visibility},
            path = #{path}
        WHERE id = #{id}
    </update>

    <!-- 根据 ID 删除节点 -->
    <delete id="deleteNodeById">
        DELETE FROM file_node WHERE id = #{id}
    </delete>

    <!-- 获取某个父节点下的所有子节点 -->
    <select id="getChildren" resultMap="FileNodeResultMap">
        SELECT *
        FROM file_node
        WHERE parent_id = #{parentId}
    </select>

    <!-- 获取某个用户所在的所有班级对应的根文件夹 -->
    <select id="getRootFoldersByUserId" resultMap="FileNodeResultMap">
        SELECT fn.*
        FROM ClassStudent cs
        JOIN file_node fn ON cs.class_id = fn.class_id AND fn.parent_id IS NULL
        WHERE cs.student_id = #{userId}
    </select>

    <!-- 获取某个课程+班级对应的根文件夹 -->
    <select id="getRootFolderByCourseAndClass" resultMap="FileNodeResultMap">
        SELECT *
        FROM file_node
        WHERE course_id = #{courseId}
          AND class_id = #{classId}
          AND parent_id IS NULL
    </select>

    <!-- 获取某个节点及其所有子节点（递归获取整个树） -->
    <select id="getAllNodesUnder" resultMap="FileNodeResultMap">
        WITH RECURSIVE node_tree AS (
            SELECT * FROM file_node WHERE id = #{folderId}
            UNION ALL
            SELECT f.* FROM file_node f
            INNER JOIN node_tree t ON f.parent_id = t.id
        )
        SELECT * FROM node_tree
    </select>

    <!-- 判断是否存在同名文件 -->
    <select id="existsByNameAndParent" resultType="int">
        SELECT COUNT(*) FROM file_node
        WHERE parent_id = #{parentId} AND name = #{name}
    </select>

    <!-- 查询是否是目录 -->
    <select id="isDir" resultType="boolean">
        SELECT is_dir FROM file_node WHERE id = #{id}
    </select>

</mapper>

