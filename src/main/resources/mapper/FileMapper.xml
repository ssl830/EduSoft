<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.example.edusoft.mapper.file.FileMapper">

     <!-- 结果映射 --> 
    <resultMap id="FileNodeResultMap" type="org.example.edusoft.entity.file.FileInfo">
        <id property="id" column="id"/>
        <result property="name" column="file_name"/>
        <result property="isDir" column="is_dir"/>
        <result property="parentId" column="parent_id"/>
        <result property="courseId" column="course_id"/>
        <result property="classId" column="class_id"/>
        <result property="uploaderId" column="uploader_id"/>
        <result property="fileType" column="file_type"/>
        <result property="sectiondirId" column="sectiondir_id"/>
        <result property="sectionId" column="section_id"/>
        <result property="lastVersionId" column="last_file_version"/>
        <result property="isCurrentVersion" column="is_current_version"/>
        <result property="fileSize" column="file_size"/>
        <result property="visibility" column="visibility"/>
        <result property="url" column="file_url"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="version" column="file_version"/>
        <result property="objectName" column="object_name"/>
    </resultMap>

    <!-- 在FileMapper.xml中添加ClassUser结果映射 -->
    <resultMap id="ClassUserResultMap" type="org.example.edusoft.entity.classroom.ClassUser">
        <id property="classId" column="class_id"/>
        <result property="userId" column="user_id"/>
        <result property="joinedAt" column="joined_at"/>
    </resultMap>

    <!-- 映射 CourseClass -->
    <resultMap id="CourseClassResultMap" type="org.example.edusoft.entity.courseclass.CourseClass">
        <id property="courseId" column="course_id"/>
        <result property="classId" column="class_id"/>
        <result property="joinedAt" column="joined_at"/>
    </resultMap>

    <!-- 查询所有节点 -->
    <select id="selectAll" resultMap="FileNodeResultMap">
        SELECT * FROM file_node
    </select>

    <!-- 根据 ID 查询节点 -->
    <select id="selectById" resultMap="FileNodeResultMap">
        SELECT * FROM file_node WHERE id = #{id}
    </select>

    <!-- 插入一个新节点 -->
    <insert id="insertNode">
        INSERT INTO file_node (
            file_name, is_dir, parent_id, course_id, class_id,
            uploader_id, sectiondir_id, file_type, section_id, 
            last_file_version, is_current_version, file_size, 
            visibility, created_at, updated_at, file_url, file_version,
            object_name
        ) VALUES (
            #{name}, #{isDir}, #{parentId}, #{courseId}, #{classId},
            #{uploaderId}, #{sectiondirId}, #{fileType}, #{sectionId}, 
            #{lastVersionId}, #{isCurrentVersion}, #{fileSize},
            #{visibility}, #{createdAt}, #{updatedAt}, #{url}, #{version},
            #{objectName}
        )
    </insert>

    <!-- 更新节点信息 -->
    <update id="updateNode">
        UPDATE file_node SET
            file_name = #{name},
            is_dir = #{isDir},
            parent_id = #{parentId},
            course_id = #{courseId},
            class_id = #{classId},
            uploader_id = #{uploaderId},
            sectiondir_id = #{sectiondirId},
            file_type = #{fileType},
            section_id = #{sectionId},
            last_file_version = #{lastVersionId},
            is_current_version = #{isCurrentVersion},
            file_size = #{fileSize},
            visibility = #{visibility},
            created_at = #{createdAt},
            updated_at = #{updatedAt},
            file_url = #{url},
            file_version = #{version},
            object_name = #{objectName}
        WHERE id = #{id}
    </update>

    <!-- 根据 ID 删除节点 -->
    <delete id="deleteNodeById">
        DELETE FROM file_node WHERE id = #{id}
    </delete>

    <!-- 获取某个父节点下的所有子节点 -->
    <select id="getChildren" resultMap="FileNodeResultMap">
        SELECT *
        FROM file_node
        WHERE parent_id = #{parentId}
    </select>

    <!-- 获取某个用户所在的所有班级对应的根文件夹 -->
    <select id="getRootFoldersByUserId" resultMap="FileNodeResultMap">
        SELECT fn.*
        FROM classuser cs
        JOIN file_node fn ON cs.class_id = fn.class_id AND fn.parent_id IS NULL
        WHERE cs.user_id = #{userId}
    </select>

    <!-- 获取某个课程+班级对应的根文件夹 -->
    <select id="getRootFolderByClassId" resultMap="FileNodeResultMap">
        SELECT *
        FROM file_node
        WHERE class_id = #{classId}
          AND parent_id IS NULL
          AND is_dir = true
    </select>

    <!-- 获取某个班级中章节对应的根文件夹 -->
    <select id="getFolderBySection" resultMap="FileNodeResultMap">
        SELECT *
        FROM file_node
        WHERE sectiondir_id = #{sectiondirId}
          AND parent_id = #{parentId}
          AND is_dir = true
    </select>

    <!-- 获取指定基础文件名的所有版本 -->
    <select id="getVersionsByBaseName" resultMap="FileNodeResultMap">
        SELECT *
        FROM file_node
        WHERE parent_id = #{parentId}
        and (
            file_name = #{baseName}
            OR file_name REGEXP CONCAT(
                '^',
                REGEXP_REPLACE(#{baseName}, '([\\$\\^\\*\\+\\?\\(\\)\\[\\]\\{\\}\\|\\\\\\.])', '\\\\$1'),
                '\\([0-9]+\\)$'
        )
)
    </select>

    <!-- 获取某个用户在某门课程下的班级ID -->
    <!-- 返回的基本数据类型long，没有复杂的对象结构需要映射，不需要指定reaultMap-->
    <select id="getClassIdByUserandCourse" resultType="long">
        SELECT cu.class_id
        FROM ClassUser cu
        JOIN CourseClass cc ON cu.class_id = cc.class_id
        WHERE cu.user_id = #{userId}
        AND cc.course_id = #{courseId}
    </select>

    <select id="getAllClassIdsByCourseId" resultType="long">
        SELECT cc.class_id
        FROM CourseClass cc
        WHERE cc.course_id = #{courseId}
    </select>

    <select id="getChildrenWithFilter" resultMap="FileNodeResultMap">
        SELECT *
        FROM file_node
        <where>
            parent_id = #{parentId}
            <if test="title != null and title != ''">
                AND (
                    file_name = #{title}
                    OR file_name REGEXP #{regexTitle})
            </if>
            <if test="type != null and type != ''">
                AND file_type = UPPER(#{type})
            </if>
            <if test="chapter != null and chapter != -1">
                AND section_id = #{chapter} and is_dir = false
            </if>
        </where>
    </select>

    <!-- 获取某个节点及其所有子节点（递归获取整个树） -->
    <select id="getAllNodesUnder" resultMap="FileNodeResultMap">
        WITH RECURSIVE node_tree AS (
            SELECT * FROM file_node WHERE id = #{folderId}
            UNION ALL
            SELECT f.* FROM file_node f
            INNER JOIN node_tree t ON f.parent_id = t.id
        )
        SELECT * FROM node_tree
    </select>


    <!-- 获取指定名称、父ID下最大编号小于当前版本的文件 -->
    <select id="getLastVersionId" resultType="long">
        SELECT id
        FROM file_node
        WHERE parent_id = #{parentId}
            AND (
                -- 基础文件名完全匹配
                file_name = #{baseName}
                OR
                -- 基础文件名加版本号匹配
                file_name LIKE CONCAT(#{baseName}, '(%)')
            )
            AND is_current_version = true
            AND file_name != #{currentName}  -- 排除当前文件名
        ORDER BY 
            -- 如果有版本号，按版本号排序；如果没有版本号，按创建时间排序
            CASE 
                WHEN file_name REGEXP '\\([0-9]+\\)$' 
                THEN CAST(REGEXP_SUBSTR(file_name, '[0-9]+') AS UNSIGNED)
                ELSE 0
            END DESC,
            created_at DESC
        LIMIT 1
    </select>


    <!-- 判断文件夹内是否存在同名文件 -->
    <select id="existsByNameAndParent" resultType="boolean">
        SELECT COUNT(*) FROM file_node
        WHERE parent_id = #{parentId} AND file_name = #{name}
    </select>

    <!-- 判断OSS库中全局是否存在同名文件，忽略目录重名 -->
    <select id="existsByNameGlobally" resultType="boolean">
        SELECT EXISTS(
            SELECT 1 
            FROM file_info 
            WHERE file_name = #{name} AND is_dir = false
        )
    </select>

    <!-- 查询是否是目录 -->
    <select id="isDir" resultType="boolean">
        SELECT is_dir FROM file_node WHERE id = #{id}
    </select>

    <!-- 根据课程ID获取所有文件 -->
    <select id="getFilesByCourseId" resultMap="FileNodeResultMap">
        SELECT *
        FROM file_node
        WHERE course_id = #{courseId}
        AND is_dir = false
        <if test="title == null or title == ''">
            AND is_current_version = true
        </if>
        <if test="title != null and title != ''">
            AND file_name REGEXP #{regexTitle}
        </if>
        <if test="type != null and type != ''">
            AND file_type = UPPER(#{type})
        </if>
        <if test="chapter != null and chapter != -1">
            AND section_id = #{chapter}
        </if>
    </select>

    <!-- 根据班级ID和章节获取文件 -->
    <select id="getFilesByClassIdandChapter" resultMap="FileNodeResultMap">
        SELECT *
        FROM file_node
        WHERE class_id = #{classId}
        AND is_dir = false
        <if test="title == null or title == ''">
            AND is_current_version = true
        </if>
        <if test="title != null and title != ''">
            AND file_name REGEXP #{regexTitle}
        </if>
        <if test="type != null and type != ''">
            AND file_type = UPPER(#{type})
        </if>
        <if test="chapter != null and chapter != -1">
            AND section_id = #{chapter}
        </if>
    </select>

    <!-- 根据班级ID获取文件 -->
    <select id="getFilesByClassId" resultMap="FileNodeResultMap">
        SELECT *
        FROM file_node
        WHERE class_id = #{classId}
        AND is_dir = false
        <if test="title == null or title == ''">
            AND is_current_version = true
        </if>
        <if test="title != null and title != ''">
            AND file_name REGEXP #{regexTitle}
        </if>
        <if test="type != null and type != ''">
            AND file_type = UPPER(#{type})
        </if>
    </select>

</mapper>

